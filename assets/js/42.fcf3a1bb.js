(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{486:function(e,t,a){"use strict";a.r(t);var s=a(2),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("IXML is a modified XML format for Ingame Info Reborn gui layout specification.\nThe gui layout resembles a tree structure and each node inherits class "),t("code",[e._v("Element")])]),e._v(" "),t("h2",{attrs:{id:"find-available-child-classes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#find-available-child-classes"}},[e._v("#")]),e._v(" Find Available Child Classes")]),e._v(" "),t("ul",[t("li",[e._v("Go to "),t("code",[e._v("./logs/latest.log")])]),e._v(" "),t("li",[e._v("Find"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[17:03:34] [Client thread/INFO] [ingameinfo]: Registered serviceable elements: \n[17:03:34] [Client thread/INFO] [ingameinfo]:   - UrlImage\n[17:03:34] [Client thread/INFO] [ingameinfo]:   - SlidingText\n[17:03:34] [Client thread/INFO] [ingameinfo]:   - Text\n[17:03:34] [Client thread/INFO] [ingameinfo]:   - VerticalGroup\n[17:03:34] [Client thread/INFO] [ingameinfo]:   - AnimText\n[17:03:34] [Client thread/INFO] [ingameinfo]:   - SimpleButton\n[17:03:34] [Client thread/INFO] [ingameinfo]:   - EmptyBlock\n[17:03:34] [Client thread/INFO] [ingameinfo]:   - SizedGroup\n[17:03:34] [Client thread/INFO] [ingameinfo]:   - HorizontalGroup\n[17:03:34] [Client thread/INFO] [ingameinfo]:   - ProgressBar\n[17:03:34] [Client thread/INFO] [ingameinfo]:\n[17:03:34] [Client thread/INFO] [ingameinfo]: Notice:\n[17:03:34] [Client thread/INFO] [ingameinfo]: 1. Elements marked with * below are unserviceable in ixml.\n[17:03:34] [Client thread/INFO] [ingameinfo]: 2. You can access style properties from parent elements.\n[17:03:34] [Client thread/INFO] [ingameinfo]:\n[17:03:34] [Client thread/INFO] [ingameinfo]: Element type: Sized* extends Element*\n[17:03:34] [Client thread/INFO] [ingameinfo]: - With style properties:\n[17:03:34] [Client thread/INFO] [ingameinfo]:   - [float] width (with deserializer: BuiltinTypesDeserializer)\n[17:03:34] [Client thread/INFO] [ingameinfo]:     - Setter callback pre: nonNegativeFloatValidation\n[17:03:34] [Client thread/INFO] [ingameinfo]:     - Setter callback post: requestReCalc\n[17:03:34] [Client thread/INFO] [ingameinfo]:   - [float] height (with deserializer: BuiltinTypesDeserializer)\n[17:03:34] [Client thread/INFO] [ingameinfo]:     - Setter callback pre: nonNegativeFloatValidation\n[17:03:34] [Client thread/INFO] [ingameinfo]:     - Setter callback post: requestReCalc\n...\n")])])])])]),e._v(" "),t("p",[e._v("As you can see, there are abstract "),t("code",[e._v("Element")]),e._v(" child classes (marked with "),t("code",[e._v("*")]),e._v(") and also solid implementations.")]),e._v(" "),t("p",[e._v("You "),t("strong",[e._v("can only")]),e._v(' use "registered serviceable elements" which are solid implementations in IXML.')]),e._v(" "),t("h2",{attrs:{id:"element"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#element"}},[e._v("#")]),e._v(" Element")]),e._v(" "),t("p",[e._v("What is an "),t("code",[e._v("Element")])]),e._v(" "),t("ul",[t("li",[e._v("It has several style properties that determine important stuff\n"),t("ul",[t("li",[e._v("such as "),t("code",[e._v("uid")]),e._v(", "),t("code",[e._v("width")]),e._v(", "),t("code",[e._v("height")])])])])]),e._v(" "),t("p",[e._v("And that's it. "),t("code",[e._v("Element")]),e._v(" is just the most fundamental thing in gui layout specification.")]),e._v(" "),t("p",[e._v("There is also a crucial child class of "),t("code",[e._v("Element")]),e._v(" called "),t("code",[e._v("ElementGroup")]),e._v("\nwhich is the key to form the tree structure and helps you to define flexible gui layout.")]),e._v(" "),t("p",[t("code",[e._v("ElementGroup")]),e._v(" literally groups "),t("code",[e._v("Element")]),e._v(" as it acts as a parent node and contains other "),t("code",[e._v("Element")]),e._v(".\nOf course, you can have nested "),t("code",[e._v("ElementGroup")]),e._v(" as it is known as a tree structure.")]),e._v(" "),t("h2",{attrs:{id:"style-property"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#style-property"}},[e._v("#")]),e._v(" Style Property")]),e._v(" "),t("p",[e._v("e.g. this is a style property from "),t("code",[e._v("Sized")])]),e._v(" "),t("ul",[t("li",[e._v("[float] width (with deserializer: BuiltinTypesDeserializer)\n"),t("ul",[t("li",[e._v("Setter callback pre: nonNegativeFloatValidation")]),e._v(" "),t("li",[e._v("Setter callback post: requestReCalc")])])])]),e._v(" "),t("p",[e._v("As you can see, every style property has two callbacks and also a deserializer to convert what's in IXML to java object.\nYou don't have to know too much about style properties to create your IXML files.")]),e._v(" "),t("h2",{attrs:{id:"example-ixml"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example-ixml"}},[e._v("#")]),e._v(" Example IXML")]),e._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("Def")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("debug")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),e._v(" false")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("focused")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),e._v(" false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v('\n<SizedGroup width = 50 height = 50 padding = {"left": 10, "top": 10}>\n    '),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("VerticalGroup")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("Text")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("uid")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("biome"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("Group")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("Group")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n")])])]),t("ul",[t("li",[t("p",[e._v("Firstly, you define some settings, like "),t("code",[e._v("debug = false")]),e._v(", "),t("code",[e._v("focused = false")]),e._v(". However, "),t("code",[e._v("debug")]),e._v(" and "),t("code",[e._v("focused")]),e._v(" are set to "),t("code",[e._v("false")]),e._v(". Usually, you don't have to use "),t("code",[e._v("<Def>")]),e._v(" for your gui.")]),e._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("Def")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("debug")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),e._v(" false")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("focused")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),e._v(" false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n")])])])]),e._v(" "),t("li",[t("p",[e._v("Then, you define a group. As you can see, we use "),t("code",[e._v("</Group>")]),e._v(" to close all kinds of "),t("code",[e._v("ElementGroup")]),e._v(". When it comes to style properties, we have "),t("code",[e._v("width")]),e._v(", "),t("code",[e._v("height")]),e._v(", "),t("code",[e._v("padding")]),e._v(", where "),t("code",[e._v("width")]),e._v(" and "),t("code",[e._v("height")]),e._v(" are from "),t("code",[e._v("SizedGroup")]),e._v(" itself but "),t("code",[e._v("padding")]),e._v(" is from parent class "),t("code",[e._v("Element")]),e._v(". That is, we can use parent's style properties.\n("),t("code",[e._v("SizedGroup")]),e._v(" provides a mask effect, which only displays stuff inside it)")]),e._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[e._v('<SizedGroup width = 50 height = 50 padding = {"left": 10, "top": 10}>\n    ...\n'),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("Group")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n")])])])]),e._v(" "),t("li",[t("p",[e._v("Then, another group. ("),t("code",[e._v("VerticalGroup")]),e._v(" stacks element together vertically, and it doesn't have a fixed size)")]),e._v(" "),t("div",{staticClass:"language-xml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("VerticalGroup")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n    ...\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("Group")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n")])])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);